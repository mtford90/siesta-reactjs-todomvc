var SiestaMixin = {
    componentWillMount: function () {
        this.listeners = [];
    },
    _cancelListeners: function () {
        for (var i = 0; i < this.listeners.length; i++) {
            var cancelListener = this.listeners[i];
            cancelListener();
        }
        this.listeners = [];
    },
    componentWillUnmount: function () {
        this._cancelListeners();
    },
    _listenToModel: function (func, Model, fn) {
        var cancelListen;
        if (Model.singleton) {
            Model.one().execute(function (err, singleton) {
                if (!err) {
                    cancelListen = this[func](singleton, function (n) {fn(singleton, n)});
                    this.listeners.push(cancelListen);
                }
                else fn(err);
            }.bind(this));
        }
        else {
            throw new Error('Cannot listen to a Model if it is not a singleton')
        }
        return function () {
            if (cancelListen) {
                var idx = this.listeners.indexOf(cancelListen);
                this.listeners.splice(idx, 1);
                cancelListen();
            }
        }.bind(this);
    },
    wrapCancelListen: function (cancelListen) {
        var wrappedCancelListen;
        if (typeof cancelListen == 'function') {
            wrappedCancelListen = function () {
                var idx = this.listeners.indexOf(cancelListen);
                this.listeners.splice(idx, 1);
                cancelListen();
            }.bind(this)
        }
        return wrappedCancelListen;
    },
    listen: function (o, fn) {
        var cancelListen;
        if (o instanceof siesta._internal.Model) cancelListen = this._listenToModel('listen', o, fn);
        else cancelListen = o.listen(fn);
        if (cancelListen) this.listeners.push(cancelListen);
        return this.wrapCancelListen(cancelListen);
    }
};

if (typeof module !== 'undefined') module.exports = {SiestaMixin: SiestaMixin};
if (typeof window !== 'undefined') window.SiestaMixin = SiestaMixin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtZWQuanMiLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksV0FBVyxHQUFHO0lBQ2Qsa0JBQWtCLEVBQUUsWUFBWTtRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztLQUN2QjtJQUNELGdCQUFnQixFQUFFLFlBQVk7UUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVDLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsY0FBYyxFQUFFLENBQUM7U0FDcEI7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztLQUN2QjtJQUNELG9CQUFvQixFQUFFLFlBQVk7UUFDOUIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7S0FDM0I7SUFDRCxjQUFjLEVBQUUsVUFBVSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtRQUN2QyxJQUFJLFlBQVksQ0FBQztRQUNqQixJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7WUFDakIsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsRUFBRSxTQUFTLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ04sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQ3JDO3FCQUNJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNoQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO2FBQ0k7WUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDO1NBQ3ZFO1FBQ0QsT0FBTyxZQUFZO1lBQ2YsSUFBSSxZQUFZLEVBQUU7Z0JBQ2QsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQy9DLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDOUIsWUFBWSxFQUFFLENBQUM7YUFDbEI7U0FDSixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNoQjtJQUNELGdCQUFnQixFQUFFLFVBQVUsWUFBWSxFQUFFO1FBQ3RDLElBQUksbUJBQW1CLENBQUM7UUFDeEIsSUFBSSxPQUFPLFlBQVksSUFBSSxVQUFVLEVBQUU7WUFDbkMsbUJBQW1CLEdBQUcsWUFBWTtnQkFDOUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQy9DLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDOUIsWUFBWSxFQUFFLENBQUM7YUFDbEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLG1CQUFtQixDQUFDO0tBQzlCO0lBQ0QsTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtRQUNyQixJQUFJLFlBQVksQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3hGLFlBQVksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLElBQUksWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQzlDO0FBQ0wsQ0FBQyxDQUFDOztBQUVGLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDL0UsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVcsR0FBRyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFNpZXN0YU1peGluID0ge1xuICAgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIH0sXG4gICAgX2NhbmNlbExpc3RlbmVyczogZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2FuY2VsTGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1tpXTtcbiAgICAgICAgICAgIGNhbmNlbExpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NhbmNlbExpc3RlbmVycygpO1xuICAgIH0sXG4gICAgX2xpc3RlblRvTW9kZWw6IGZ1bmN0aW9uIChmdW5jLCBNb2RlbCwgZm4pIHtcbiAgICAgICAgdmFyIGNhbmNlbExpc3RlbjtcbiAgICAgICAgaWYgKE1vZGVsLnNpbmdsZXRvbikge1xuICAgICAgICAgICAgTW9kZWwub25lKCkuZXhlY3V0ZShmdW5jdGlvbiAoZXJyLCBzaW5nbGV0b24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxMaXN0ZW4gPSB0aGlzW2Z1bmNdKHNpbmdsZXRvbiwgZnVuY3Rpb24gKG4pIHtmbihzaW5nbGV0b24sIG4pfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goY2FuY2VsTGlzdGVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBmbihlcnIpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGxpc3RlbiB0byBhIE1vZGVsIGlmIGl0IGlzIG5vdCBhIHNpbmdsZXRvbicpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChjYW5jZWxMaXN0ZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihjYW5jZWxMaXN0ZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgICAgIGNhbmNlbExpc3RlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcyk7XG4gICAgfSxcbiAgICB3cmFwQ2FuY2VsTGlzdGVuOiBmdW5jdGlvbiAoY2FuY2VsTGlzdGVuKSB7XG4gICAgICAgIHZhciB3cmFwcGVkQ2FuY2VsTGlzdGVuO1xuICAgICAgICBpZiAodHlwZW9mIGNhbmNlbExpc3RlbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB3cmFwcGVkQ2FuY2VsTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpZHggPSB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGNhbmNlbExpc3Rlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgY2FuY2VsTGlzdGVuKCk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JhcHBlZENhbmNlbExpc3RlbjtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gKG8sIGZuKSB7XG4gICAgICAgIHZhciBjYW5jZWxMaXN0ZW47XG4gICAgICAgIGlmIChvIGluc3RhbmNlb2Ygc2llc3RhLl9pbnRlcm5hbC5Nb2RlbCkgY2FuY2VsTGlzdGVuID0gdGhpcy5fbGlzdGVuVG9Nb2RlbCgnbGlzdGVuJywgbywgZm4pO1xuICAgICAgICBlbHNlIGNhbmNlbExpc3RlbiA9IG8ubGlzdGVuKGZuKTtcbiAgICAgICAgaWYgKGNhbmNlbExpc3RlbikgdGhpcy5saXN0ZW5lcnMucHVzaChjYW5jZWxMaXN0ZW4pO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwQ2FuY2VsTGlzdGVuKGNhbmNlbExpc3Rlbik7XG4gICAgfVxufTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSBtb2R1bGUuZXhwb3J0cyA9IHtTaWVzdGFNaXhpbjogU2llc3RhTWl4aW59O1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB3aW5kb3cuU2llc3RhTWl4aW4gPSBTaWVzdGFNaXhpbjsiXX0=